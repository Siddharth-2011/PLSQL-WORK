1.
--for finding greater of two numbers
DECLARE 
V1 NUMBER;
V2 NUMBER;
BEGIN
V1:=10;
V2:=8;
IF V1>V2 THEN
DBMS_OUTPUT.PUT_LINE('FIRST NUMBER IS GREATER');
ELSE 
DBMS_OUTPUT.PUT_LINE('SECOND NUMBER IS GREATER');
END IF;
END;

2.
--for finding even or odd number
DECLARE 
V1 NUMBER;
V2 NUMBER;
BEGIN
V1:=10;
V2:=8;
IF V1 MOD 2=0 THEN -- WILL WORK WITH BRACKETS ALSO IF(V1 MOD 2 =0)
DBMS_OUTPUT.PUT_LINE('NUMBER IS EVEN');
ELSE 
DBMS_OUTPUT.PUT_LINE('NUMBER IS ODD');
END IF;
END;

3.
--taking user inputs for finding greater number
DECLARE 
V1 NUMBER := :ENTER_NUMBER1  ;
V2 NUMBER := :ENTER_NUMBER2  ;
BEGIN
IF V1>V2 THEN
DBMS_OUTPUT.PUT_LINE('FIRST NUMBER IS GREATER');
ELSE 
DBMS_OUTPUT.PUT_LINE('SECOND NUMBER IS GREATER');
END IF;
END;

4.
--for finding greater salary
DECLARE
RECORD EMPLOYE3%ROWTYPE;
NSAL NUMBER;
BEGIN
SELECT * INTO RECORD FROM EMPLOYE3 WHERE LOCATION='JAMNAGAR';
NSAL:=RECORD.SALARY;
IF (NSAL>60000) THEN
DBMS_OUTPUT.PUT_LINE('SALARY IS FINE');
ELSE DBMS_OUTPUT.PUT_LINE('NEEDS TO EARN MORE');
END IF;
END;

5.
--nested if to find greatest of three numbers
DECLARE 
V1 NUMBER;
V2 NUMBER;
V3 NUMBER;
BEGIN
V1:=10;
V2:=8;
V3:=3;
IF V1>V2 THEN
      IF V1>V3 THEN
                   DBMS_OUTPUT.PUT_LINE('FIRST NUMBER IS GREATER');
      ELSE 
          DBMS_OUTPUT.PUT_LINE('THIRD NUMBER IS GREATER');
          END IF;
ELSE IF V2>V3 THEN
DBMS_OUTPUT.PUT_LINE('SECOND NUMBER IS GREATER');
ELSE DBMS_OUTPUT.PUT_LINE('THIRD NUMBER IS GREATER');
END IF;
END IF;
END;

6.
--to check whether a record is found or not
DECLARE
BEGIN
UPDATE EMPLOYE3 SET SALARY=36000 WHERE EMPID=39;
IF SQL%FOUND THEN
    DBMS_OUTPUT.PUT("RECORD FOUND");
ELSE
    DBMS_OUTPUT.PUT("RECORD NOT FOUND");
END IF;
END;

7.
--to check whether a record is found or not
DECLARE
N NUMBER;
BEGIN
UPDATE EMPLOYE3 SET SALARY=36000 WHERE EMPID=9;
IF SQL%NOTFOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
ELSE
    DBMS_OUTPUT.PUT_LINE('RECORD FOUND');
END IF;
N:=SQL%ROWCOUNT
DBMS_OUTPUT.PUT_LINE(N);
END;

8.
--returning row count for the records found
DECLARE
BEGIN
UPDATE EMPLOYE3 SET SALARY=36000 WHERE EMPID=29;
IF SQL%NOTFOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
ELSE
    DBMS_OUTPUT.PUT_LINE('RECORD FOUND');
END IF;
DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
END;

9.
--case statement in PLSQL
DECLARE
 A NUMBER:=2;
 B NUMBER:=1;
 OPERATION NUMBER:=:ENTER_YOUR_CHOICE;
BEGIN
CASE OPERATION
    WHEN 1 THEN DBMS_OUTPUT.PUT_LINE(A+B);
    WHEN 2 THEN DBMS_OUTPUT.PUT_LINE(A-B);
    WHEN 3 THEN DBMS_OUTPUT.PUT_LINE(A*B);
    ELSE DBMS_OUTPUT.PUT_LINE('INVALID');
END CASE;
END;

